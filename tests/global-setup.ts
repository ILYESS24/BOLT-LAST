import { chromium, FullConfig } from '@playwright/test';

/**
 * Configuration globale pour les tests Playwright
 * D√©marre les serveurs n√©cessaires avant l'ex√©cution des tests
 */

async function globalSetup(_config: FullConfig) {
  console.log('üöÄ D√©marrage de la configuration globale des tests...');
  
  // V√©rifier que les variables d'environnement sont configur√©es
  const requiredEnvVars = [
    'LANGCHAIN_API_KEY',
    'OPENAI_API_KEY'
  ];
  
  const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
  
  if (missingVars.length > 0) {
    console.warn(`‚ö†Ô∏è Variables d'environnement manquantes: ${missingVars.join(', ')}`);
    console.warn('Certains tests peuvent ne pas fonctionner correctement.');
  }
  
  // D√©marrer le serveur backend si n√©cessaire
  if (process.env.START_BACKEND === 'true') {
    console.log('üîß D√©marrage du serveur backend...');
    // Ici, vous pourriez d√©marrer votre serveur backend
    // Par exemple, avec child_process.spawn
  }
  
  // D√©marrer le serveur frontend si n√©cessaire
  if (process.env.START_FRONTEND === 'true') {
    console.log('üîß D√©marrage du serveur frontend...');
    // Ici, vous pourriez d√©marrer votre serveur frontend
    // Par exemple, avec child_process.spawn
  }
  
  // Attendre que les serveurs soient pr√™ts
  if (process.env.START_BACKEND === 'true' || process.env.START_FRONTEND === 'true') {
    console.log('‚è≥ Attente que les serveurs soient pr√™ts...');
    await new Promise(resolve => setTimeout(resolve, 5000));
  }
  
  // V√©rifier que l'application est accessible
  const browser = await chromium.launch();
  const page = await browser.newPage();
  
  try {
    await page.goto(process.env.BASE_URL || 'http://localhost:3000', { timeout: 30000 });
    console.log('‚úÖ Application accessible');
  } catch (error) {
    console.error('‚ùå Application non accessible:', error);
    throw error;
  } finally {
    await browser.close();
  }
  
  console.log('‚úÖ Configuration globale termin√©e');
}

export default globalSetup;