import { Client } from "langsmith";

/**
 * G√©n√©rateur de tests automatiques avec l'IA
 * Utilise LangSmith et OpenAI pour g√©n√©rer des cas de test suppl√©mentaires
 */

interface TestCase {
  name: string;
  prompt: string;
  expectedElements: string[];
  description: string;
  category: string;
  priority: 'low' | 'medium' | 'high';
}

interface GeneratedTestSuite {
  testCases: TestCase[];
  metadata: {
    generatedAt: string;
    totalTests: number;
    categories: string[];
    averageComplexity: number;
  };
}

export class AITestGenerator {
  private langsmithClient: Client;
  private openaiApiKey: string;

  constructor() {
    this.langsmithClient = new Client({
      apiKey: process.env.LANGCHAIN_API_KEY,
    });
    this.openaiApiKey = process.env.OPENAI_API_KEY || '';
  }

  /**
   * G√©n√®re des cas de test bas√©s sur un prompt de base
   */
  async generateTestCases(basePrompt: string, count: number = 5): Promise<TestCase[]> {
    const prompt = `
G√©n√®re ${count} cas de test pour un AI App Builder bas√© sur ce prompt de base: "${basePrompt}"

Chaque test doit inclure:
1. Un nom descriptif
2. Un prompt √† tester (variation du prompt de base)
3. Les √©l√©ments attendus dans la r√©ponse
4. Une description du test
5. Une cat√©gorie (ui, functionality, performance, security, accessibility)
6. Une priorit√© (low, medium, high)

Format JSON:
[
  {
    "name": "Test de cr√©ation d'application e-commerce",
    "prompt": "Cr√©e une application e-commerce avec panier et paiement",
    "expectedElements": ["ecommerce", "cart", "payment", "React"],
    "description": "Test de cr√©ation d'une application e-commerce compl√®te",
    "category": "functionality",
    "priority": "high"
  }
]
`;

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.openaiApiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'gpt-4',
          messages: [
            {
              role: 'system',
              content: 'Tu es un expert en g√©n√©ration de tests automatis√©s. G√©n√®re des cas de test pertinents, r√©alistes et vari√©s.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.7,
          max_tokens: 3000
        })
      });

      const data = await response.json();
      const generatedContent = data.choices[0].message.content;
      
      // Extraire le JSON de la r√©ponse
      const jsonMatch = generatedContent.match(/\[[\s\S]*\]/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0]);
      }
      
      return [];
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration de tests:', error);
      return [];
    }
  }

  /**
   * G√©n√®re des tests en fran√ßais
   */
  async generateFrenchTestCases(basePrompt: string, count: number = 3): Promise<TestCase[]> {
    const prompt = `
G√©n√®re ${count} cas de test en fran√ßais pour un AI App Builder bas√© sur ce prompt: "${basePrompt}"

Les tests doivent √™tre en fran√ßais et tester des fonctionnalit√©s sp√©cifiques √† la langue fran√ßaise.

Format JSON:
[
  {
    "name": "Test de cr√©ation d'application avec accents",
    "prompt": "Cr√©e une application de gestion d'√©l√®ves avec pr√©noms accentu√©s",
    "expectedElements": ["√©l√®ves", "pr√©noms", "accents", "UTF-8"],
    "description": "Test de gestion des caract√®res accentu√©s en fran√ßais",
    "category": "functionality",
    "priority": "medium"
  }
]
`;

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.openaiApiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'gpt-4',
          messages: [
            {
              role: 'system',
              content: 'Tu es un expert en g√©n√©ration de tests automatis√©s en fran√ßais. G√©n√®re des cas de test pertinents pour la langue fran√ßaise.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.7,
          max_tokens: 2000
        })
      });

      const data = await response.json();
      const generatedContent = data.choices[0].message.content;
      
      const jsonMatch = generatedContent.match(/\[[\s\S]*\]/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0]);
      }
      
      return [];
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration de tests fran√ßais:', error);
      return [];
    }
  }

  /**
   * G√©n√®re des tests de r√©gression
   */
  async generateRegressionTests(count: number = 3): Promise<TestCase[]> {
    const prompt = `
G√©n√®re ${count} tests de r√©gression pour un AI App Builder.

Les tests doivent couvrir des bugs connus et des r√©gressions potentielles dans:
- La g√©n√©ration de code
- L'interface utilisateur
- Les performances
- La s√©curit√©
- L'accessibilit√©

Format JSON:
[
  {
    "name": "Test de r√©gression - Gestion des erreurs",
    "prompt": "Cr√©e une application qui g√®re les erreurs de mani√®re robuste",
    "expectedElements": ["try-catch", "error handling", "validation"],
    "description": "Test de r√©gression pour la gestion des erreurs",
    "category": "security",
    "priority": "high"
  }
]
`;

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.openaiApiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'gpt-4',
          messages: [
            {
              role: 'system',
              content: 'Tu es un expert en tests de r√©gression. G√©n√®re des tests qui couvrent des bugs connus et des r√©gressions potentielles.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.7,
          max_tokens: 2000
        })
      });

      const data = await response.json();
      const generatedContent = data.choices[0].message.content;
      
      const jsonMatch = generatedContent.match(/\[[\s\S]*\]/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0]);
      }
      
      return [];
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration de tests de r√©gression:', error);
      return [];
    }
  }

  /**
   * G√©n√®re une suite de tests compl√®te
   */
  async generateTestSuite(basePrompt: string): Promise<GeneratedTestSuite> {
    console.log('ü§ñ G√©n√©ration d\'une suite de tests compl√®te...');
    
    const [basicTests, frenchTests, regressionTests] = await Promise.all([
      this.generateTestCases(basePrompt, 5),
      this.generateFrenchTestCases(basePrompt, 3),
      this.generateRegressionTests(3)
    ]);

    const allTests = [...basicTests, ...frenchTests, ...regressionTests];
    
    const categories = [...new Set(allTests.map(test => test.category))];
    const averageComplexity = allTests.reduce((sum, test) => {
      const complexity = test.priority === 'high' ? 3 : test.priority === 'medium' ? 2 : 1;
      return sum + complexity;
    }, 0) / allTests.length;

    return {
      testCases: allTests,
      metadata: {
        generatedAt: new Date().toISOString(),
        totalTests: allTests.length,
        categories,
        averageComplexity
      }
    };
  }

  /**
   * Sauvegarde les tests g√©n√©r√©s dans un fichier
   */
  async saveGeneratedTests(testSuite: GeneratedTestSuite, filename: string): Promise<void> {
    const fs = await import('fs/promises');
    const path = await import('path');
    
    const outputDir = path.join(process.cwd(), 'tests', 'e2e', 'auto-generated');
    
    // Cr√©er le dossier s'il n'existe pas
    try {
      await fs.mkdir(outputDir, { recursive: true });
    } catch {
      // Le dossier existe d√©j√†
    }
    
    const filePath = path.join(outputDir, `${filename}.json`);
    await fs.writeFile(filePath, JSON.stringify(testSuite, null, 2));
    
    console.log(`üíæ Tests g√©n√©r√©s sauvegard√©s dans: ${filePath}`);
  }

  /**
   * G√©n√®re du code de test Playwright √† partir des cas de test
   */
  async generatePlaywrightTestCode(testCases: TestCase[]): Promise<string> {
    const prompt = `
G√©n√®re du code de test Playwright pour ces cas de test:

${JSON.stringify(testCases, null, 2)}

Le code doit:
1. Utiliser Playwright avec TypeScript
2. Inclure des s√©lecteurs data-testid
3. Avoir des assertions appropri√©es
4. G√©rer les erreurs
5. √ätre bien document√©

Format: Code TypeScript complet avec imports et exports.
`;

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.openaiApiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'gpt-4',
          messages: [
            {
              role: 'system',
              content: 'Tu es un expert en tests Playwright. G√©n√®re du code de test TypeScript complet et fonctionnel.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.3,
          max_tokens: 4000
        })
      });

      const data = await response.json();
      return data.choices[0].message.content;
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration du code de test:', error);
      return '';
    }
  }

  /**
   * √âvalue la qualit√© des tests g√©n√©r√©s
   */
  async evaluateTestQuality(testCases: TestCase[]): Promise<{
    score: number;
    feedback: string;
    improvements: string[];
  }> {
    const prompt = `
√âvalue la qualit√© de ces cas de test:

${JSON.stringify(testCases, null, 2)}

Crit√®res d'√©valuation:
1. Pertinence des tests
2. Couverture des fonctionnalit√©s
3. Clart√© des descriptions
4. Vari√©t√© des sc√©narios
5. Priorisation appropri√©e

Donne un score de 0 √† 10 et des suggestions d'am√©lioration.

Format JSON:
{
  "score": 8.5,
  "feedback": "Les tests sont bien structur√©s et couvrent les fonctionnalit√©s principales...",
  "improvements": [
    "Ajouter plus de tests de performance",
    "Inclure des tests d'accessibilit√©"
  ]
}
`;

    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.openaiApiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'gpt-4',
          messages: [
            {
              role: 'system',
              content: 'Tu es un expert en qualit√© de tests. √âvalue objectivement la qualit√© des cas de test.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.3,
          max_tokens: 1500
        })
      });

      const data = await response.json();
      const generatedContent = data.choices[0].message.content;
      
      const jsonMatch = generatedContent.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0]);
      }
      
      return {
        score: 0,
        feedback: 'Impossible d\'√©valuer les tests',
        improvements: []
      };
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'√©valuation des tests:', error);
      return {
        score: 0,
        feedback: `Erreur lors de l'√©valuation: ${error.message}`,
        improvements: []
      };
    }
  }
}
