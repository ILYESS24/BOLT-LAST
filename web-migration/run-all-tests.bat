@echo off
setlocal enabledelayedexpansion

echo üß™ Ex√©cution de tous les tests CD/CI pour Dyad Web
echo ==================================================

REM Variables pour le suivi des r√©sultats
set TOTAL_TESTS=0
set PASSED_TESTS=0
set FAILED_TESTS=0

REM Fonction pour ex√©cuter les tests
:run_tests
set test_name=%1
set test_command=%2
set test_dir=%3

echo.
echo üîç Ex√©cution: %test_name%
echo Commande: %test_command%
echo R√©pertoire: %test_dir%
echo ----------------------------------------

cd /d "%test_dir%"
call %test_command%
if %errorlevel% equ 0 (
    echo ‚úÖ %test_name%: SUCC√àS
    set /a PASSED_TESTS+=1
) else (
    echo ‚ùå %test_name%: √âCHEC
    set /a FAILED_TESTS+=1
)
set /a TOTAL_TESTS+=1
cd /d "%~dp0"
goto :eof

REM V√©rifier que nous sommes dans le bon r√©pertoire
if not exist "backend" (
    echo ‚ùå Erreur: Ce script doit √™tre ex√©cut√© depuis le r√©pertoire web-migration
    pause
    exit /b 1
)
if not exist "frontend" (
    echo ‚ùå Erreur: Ce script doit √™tre ex√©cut√© depuis le r√©pertoire web-migration
    pause
    exit /b 1
)

echo üìã Tests √† ex√©cuter:
echo 1. Tests Backend API (Jest)
echo 2. Tests Frontend Components (Vitest)
echo 3. Tests d'Int√©gration End-to-End
echo 4. Tests WebSocket
echo 5. Tests de Performance
echo 6. Tests de S√©curit√©

REM 1. Tests Backend API
call :run_tests "Tests Backend API" "npm test" "backend"

REM 2. Tests Frontend Components
call :run_tests "Tests Frontend Components" "npm test" "frontend"

REM 3. Tests d'Int√©gration (si disponibles)
if exist "backend\src\__tests__\integration" (
    call :run_tests "Tests d'Int√©gration E2E" "npm run test:integration" "backend"
)

REM 4. Tests de Performance (si disponibles)
findstr /C:"test:performance" backend\package.json >nul 2>&1
if %errorlevel% equ 0 (
    call :run_tests "Tests de Performance" "npm run test:performance" "backend"
)

REM 5. Tests de S√©curit√© (si disponibles)
findstr /C:"test:security" backend\package.json >nul 2>&1
if %errorlevel% equ 0 (
    call :run_tests "Tests de S√©curit√©" "npm run test:security" "backend"
)

REM 6. Tests de Linting
call :run_tests "Linting Backend" "npm run lint" "backend"
call :run_tests "Linting Frontend" "npm run lint" "frontend"

REM 7. Tests de Build
call :run_tests "Build Backend" "npm run build" "backend"
call :run_tests "Build Frontend" "npm run build" "frontend"

REM 8. Tests de Type Checking
call :run_tests "Type Checking Backend" "npm run ts" "backend"
call :run_tests "Type Checking Frontend" "npx tsc --noEmit" "frontend"

REM R√©sum√© des r√©sultats
echo.
echo üìä R√âSUM√â DES TESTS
echo ==================
echo Total des tests: %TOTAL_TESTS%
echo Tests r√©ussis: %PASSED_TESTS%
echo Tests √©chou√©s: %FAILED_TESTS%

REM Calcul du pourcentage de r√©ussite
if %TOTAL_TESTS% gtr 0 (
    set /a SUCCESS_RATE=%PASSED_TESTS% * 100 / %TOTAL_TESTS%
    echo Taux de r√©ussite: %SUCCESS_RATE%%%
    
    if %FAILED_TESTS% equ 0 (
        echo.
        echo üéâ TOUS LES TESTS SONT PASS√âS !
        echo L'application est pr√™te pour la production !
        pause
        exit /b 0
    ) else (
        echo.
        echo ‚ö†Ô∏è  CERTAINS TESTS ONT √âCHOU√â
        echo Veuillez corriger les erreurs avant le d√©ploiement.
        pause
        exit /b 1
    )
) else (
    echo.
    echo ‚ùå AUCUN TEST N'A √âT√â EX√âCUT√â
    pause
    exit /b 1
)
