// Test de l'√©valuateur LangSmith
const { LangSmithEvaluator } = require('./tests/utils/langsmith-evaluator.ts');

async function testLangSmithEvaluator() {
  console.log('üß™ Test de l\'√©valuateur LangSmith...');
  
  try {
    const evaluator = new LangSmithEvaluator();
    
    // Test 1: √âvaluation d'une r√©ponse de qualit√©
    console.log('\nüìù Test 1: √âvaluation d\'une r√©ponse de qualit√©');
    const goodResponse = `
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);
  
  return (
    <div>
      <h1>Compteur: {count}</h1>
      <button onClick={() => setCount(count + 1)}>
        Incr√©menter
      </button>
    </div>
  );
}

export default Counter;
    `;
    
    const result1 = await evaluator.evaluate({
      prompt: 'Cr√©e une application React avec un compteur',
      response: goodResponse,
      criteria: ['quality', 'completeness', 'relevance', 'accuracy']
    });
    
    console.log('‚úÖ R√©sultat Test 1:');
    console.log(`   Score global: ${result1.overall_score.toFixed(2)}`);
    console.log(`   Pass: ${result1.pass}`);
    console.log(`   Feedback: ${result1.feedback}`);
    console.log(`   Crit√®res:`, result1.criteria_scores);
    
    // Test 2: √âvaluation d'une r√©ponse de mauvaise qualit√©
    console.log('\nüìù Test 2: √âvaluation d\'une r√©ponse de mauvaise qualit√©');
    const badResponse = 'Hello world';
    
    const result2 = await evaluator.evaluate({
      prompt: 'Cr√©e une application React avec un compteur',
      response: badResponse,
      criteria: ['quality', 'completeness', 'relevance']
    });
    
    console.log('‚úÖ R√©sultat Test 2:');
    console.log(`   Score global: ${result2.overall_score.toFixed(2)}`);
    console.log(`   Pass: ${result2.pass}`);
    console.log(`   Feedback: ${result2.feedback}`);
    console.log(`   Suggestions:`, result2.suggestions);
    
    // Test 3: √âvaluation avec crit√®res sp√©cifiques
    console.log('\nüìù Test 3: √âvaluation avec crit√®res sp√©cifiques');
    const mediumResponse = `
function App() {
  return <div>Hello</div>;
}
    `;
    
    const result3 = await evaluator.evaluate({
      prompt: 'Cr√©e une application React simple',
      response: mediumResponse,
      criteria: ['technical_correctness', 'clarity', 'user_experience']
    });
    
    console.log('‚úÖ R√©sultat Test 3:');
    console.log(`   Score global: ${result3.overall_score.toFixed(2)}`);
    console.log(`   Pass: ${result3.pass}`);
    console.log(`   Feedback: ${result3.feedback}`);
    console.log(`   Crit√®res:`, result3.criteria_scores);
    
    console.log('\nüéâ Tous les tests LangSmith sont pass√©s !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test LangSmith:', error);
  }
}

// Ex√©cuter les tests
testLangSmithEvaluator();
